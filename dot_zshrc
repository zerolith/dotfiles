export ZSH=$HOME/.zsh
export ZSH_COMPDUMP=$ZSH/cache/.zcompdump-$HOST

fpath=( ~/.zsh/completion "${fpath[@]}" )
fpath=( ~/.zsh/functions $fpath)
autoload -Uz compinit && compinit -u

autoload -U $ZSH/functions/*(N:t)

export LANG=de_DE.UTF-8
# export SSH_KEY_PATH="~/.ssh/rsa_id"


if [ $commands[nvim] ]; then
    export GIT_EDITOR=nvim
    export EDITOR="nvim"
else
    export GIT_EDITOR=vim
    export EDITOR="vim"
fi
export PATH="$PATH:$HOME/.bin"
export PATH="$PATH:$HOME/.bin-sonnen"
export PATH="$PATH:$HOME/.rvm/bin"

[ -f ~/.cargo/env ] && source "$HOME/.cargo/env"

[ -f ~/.restic/.restic.zsh ] && source "$HOME/.restic/restic.zsh"

[ -f ~/.vault-token ] && source "$ZSH/vault.zsh"

[ -f "$ZSH/fzf.zsh" ] && source "$ZSH/fzf.zsh"

if [ -f /opt/homebrew/bin/brew ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
    # export GOROOT="$(brew --prefix golang)/libexec"
    export GOROOT="/opt/homebrew/opt/go/libexec"
    export GOPATH="$HOME/go"
    export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
fi

[ -d "$ZSH/zsh-autosuggestions/" ] && source "$ZSH/zsh-autosuggestions/zsh-autosuggestions.zsh"

[ -d "$ZSH/zsh-vi-mode" ] && source "$ZSH/zsh-vi-mode/zsh-vi-mode.plugin.zsh"

[ -s "$HOME/.rvm/scripts/rvm" ] && source "$HOME/.rvm/scripts/rvm"

# keybindings Strg+v is your friend :-)
bindkey "^[[1;5D" .backward-word
bindkey "^[[1;5C" .forward-word
bindkey "^[[1;6D" backward-delete-word
bindkey "^[[1;6C" delete-word
# alt+left (on mac) deletes word
bindkey "^[" backward-kill-word
# fn-left
bindkey "^[[H" .backward-word
# fn-right
bindkey "^[[F" .forward-word
# arrow up/down searches in history if line is already started
bindkey '^[[A' up-line-or-search
bindkey '^[[B' down-line-or-search

# History Settings (big history for use with many open shells and no dups)
# Different History files for root and standard user
HISTFILE=~/.zhistory
SAVEHIST=10000
HISTSIZE=12000
setopt share_history append_history extended_history hist_no_store hist_ignore_all_dups hist_ignore_space

# If a command is issued that can’t be executed as a normal command, and the command is the name of a directory, perform the cd command to that directory.
setopt AUTO_CD

# Treat  the ‘#’, ‘~’ and ‘^’ characters as part of patterns for filename generation, etc.  (An initial unquoted ‘~’ always produces named directory expansion.)
setopt EXTENDED_GLOB

# If a pattern for filename generation has no matches, print an error, instead of leaving it unchanged in the argument  list. This also applies to file expansion of an initial ‘~’ or ‘=’.
setopt NOMATCH

# no Beep on error in ZLE.
setopt NO_BEEP

# Remove  any right prompt from display when accepting a command line. This may be useful with terminals with other cut/paste methods.
setopt TRANSIENT_RPROMPT

# If unset, the cursor is set to the end of the word if completion is started. Otherwise it stays there and completion is done from both ends.
setopt COMPLETE_IN_WORD

# Make cd push the old directory onto the directory stack.
setopt AUTO_PUSHD

# Don’t push multiple copies of the same directory onto the directory stack.
setopt PUSHD_IGNORE_DUPS

# DON NOT Allow ‘>’ redirection to truncate existing files, and ‘>>’ to create files. Otherwise ‘>!’ or ‘>|’ must be used to truncate  a file, and ‘>>!’ or ‘>>|’ to create a file.
# setopt no_clobber

# source ~/.config/catppuccin_latte-zsh-syntax-highlighting.zsh

# plugins=(git sudo alias-finder wd bundler rust zsh-vi-mode kubectl history emoji emoji-clock zsh-autosuggestions macos iterm2)


COMPLETION_WAITING_DOTS="true"

setopt autopushd
autoload -U add-zsh-hook
autoload -U cdr
autoload -U chpwd_recent_dirs
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':completion:*:*:cdr:*:*' menu selection
zstyle ':chpwd:*' recent-dirs-prune parent


extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1    ;;
            *.tar.gz)    tar xvzf $1    ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       rar x $1       ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xvf $1     ;;
            *.tbz2)      tar xvjf $1    ;;
            *.tgz)       tar xvzf $1    ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

dict() {
    grep "$@" /usr/share/dict/words
}

exip () {
    echo -n "Current External IP: "
    curl http://icanhazip.com
}

ips () {
    # determine local IP address
    ifconfig | grep "inet " | awk '{ print $2 }'
}

zipf () {
    zip -r "$1".zip "$1" ;
}

ff () {
    /usr/bin/find . -name "$@" ;
}

# ALIAS

alias h='history'
alias j='jobs -l'
alias now='date +"%T"'
alias ports='netstat -tulanp'
alias header='curl -I'
alias headerc='curl -I --compress'
alias ln='ln -i'

alias apt-get="sudo apt-get"
alias updatey="sudo apt-get --yes"
alias update='sudo apt-get update && sudo apt-get upgrade'

alias reboot='sudo /sbin/reboot'
alias poweroff='sudo /sbin/poweroff'
alias halt='sudo /sbin/halt'
alias shutdown='sudo /sbin/shutdown'

alias nginxreload='sudo /usr/local/nginx/sbin/nginx -s reload'
alias nginxtest='sudo /usr/local/nginx/sbin/nginx -t'

# Linux only?
alias meminfo='free -m -l -t'
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
alias cpuinfo='lscpu'
alias cpuinfo='less /proc/cpuinfo' ##
alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'
alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'

alias wget='wget -c'
alias df='df -H'
alias du='du -ch'
alias s="ssh -o ConnectTimeout=5 -o ConnectionAttempts=1 -o StrictHostKeyChecking=no"

alias xtime='watch -t -n1 "date +%T | figlet -f big -c"'
alias fact='wget randomfunfacts.com -O - 2>/dev/null | grep \<strong\> | sed "s;^.*<i>\(.*\)</i>.*$;\1;"'
alias quote='wget quotability.com -O - 2>/dev/null | grep \<strong\> | sed "s;^.*<i>\(.*\)</i>.*$;\1;" '
alias servethis="python -c 'import SimpleHTTPServer; SimpleHTTPServer.test()'"
alias numFiles='echo $(ls -1 | wc -l)'
alias pkt_trace='sudo tcpflow -i `active_net_iface` -c'
alias http_trace='pkt_trace port 80'


alias haggenmüller="spree ssh 36525"
alias 39859="spree ssh 39859"
alias 169019="spree ssh 169019"
alias sb10="s root@sb10"
alias eco8="s root@eco8"

if [ $commands[eza] ]; then
    alias l="eza -l --icons=always"
    alias ll="eza -la --icons=always"
    alias tree="eza -l --tree --icons=always"
    alias v="clear; eza --git -h -l --icons=always --group-directories-first --time-style long-iso"
elif [ $commands[exa] ]; then
    alias l="exa -l --icons"
    alias ll="exa -la --icons"
    alias tree="exa -l --tree --icons"
    alias v="clear; exa --git -h --icons -l --group-directories-first --time-style long-iso --color auto"
else
    alias l="ls -l"
    alias ll="ls -la"
    alias v="ls -l"
fi

alias cd=' cd'
alias ..=' cd ..'
alias ...=' cd ..; cd ..'
alias ....=' cd ..; cd ..; cd .. '
alias cd..='..'
alias cd...='...'
alias cd....='....'

alias tf='tail -f'


alias screen='TERM=screen screen'
alias cl='clear'
alias gz='tar -zcvf'
alias rgf='rg --files | rg'


function title {
    echo -ne "\033]0;"$*"\007"
}

set-window-title() {
    # /Users/clessg/projects/dotfiles -> ~/p/dotfiles
    window_title="${PWD}"
    # echo -ne "$window_title"
    title $window_title
}

add-zsh-hook precmd set-window-title

if [ -x "$(command -v zellij)" ]; then
    eval "$(zellij setup --generate-completion zsh | grep "^function")"
fi;

if [[ -x "$(command -v gping)" ]];
then
    alias ping='gping'
else
    alias ping='ping -c 5'
fi;

alias fastping='ping -c 100 -s.2'

function fvim() {
    if [[ $# -eq 0 ]]; then
        fd -t f | fzf --header "Open File in Vim" --preview "bat --color=always {}" | xargs nvim
    else
        fd -t f | fzf --header "Open File in Vim" --preview "bat --color=always {}" -q "$@" | xargs nvim
    fi
}

function svim() {
    if [ $commands[nvim] ]; then
        if [[ $# -eq 0 ]]; then
            sudo nvim .
        else
            sudo nvim "$@"
        fi
    else
        if [[ $# -eq 0 ]]; then
            sudo vim .
        else
            sudo vim "$@"
        fi
    fi
}

function vim() {
    if [ $commands[nvim] ]; then
        if [[ $# -eq 0 ]]; then
            nvim .
        else
            nvim "$@"
        fi
    else
        if [[ $# -eq 0 ]]; then
            vim .
        else
            vim "$@"
        fi
    fi
}
# Nix
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi

if [ $commands[chezmoi] ]; then
    source <(chezmoi completion zsh)
fi

if [ $commands[direnv] ]; then
    eval "$(direnv hook zsh)"
fi



### Saved for later

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi
#

##### suffix aliases
alias -s Dockerfile="docker build - < "

alias ocr='docker run --rm -v `pwd`:/home/docker jbarlow83/ocrmypdf --skip-text'
alias -s tex='docker run -i -t --rm -v `pwd`:/data docker-registry.eccenca.com/eccenca-latex:v1.10.0 rubber --inplace --maxerr -1 --short --force --warn all --pdf'
alias -s pdf="open -a Preview"



# Top ten memory hogs
# http://www.commandlinefu.com/commands/view/7139/top-ten-memory-hogs
memtop() {ps -eorss,args | gsort -nr | gpr -TW$COLUMNS | ghead}
zle -N memtop

# show newest files
# http://www.commandlinefu.com/commands/view/9015/find-the-most-recently-changed-files-recursively
newest () {find . -type f -printf '%TY-%Tm-%Td %TT %p\n' | grep -v cache | grep -v ".hg" | grep -v ".git" | sort -r | less }

# http://www.commandlinefu.com/commands/view/7294/backup-a-file-with-a-date-time-stamp
buf () {
    oldname=$1;
    if [ "$oldname" != "" ]; then
        datepart=$(date +%Y-%m-%d);
        firstpart=`echo $oldname | cut -d "." -f 1`;
        newname=`echo $oldname | sed s/$firstpart/$firstpart.$datepart/`;
        cp -R ${oldname} ${newname};
    fi
}
dobz2 () {
    name=$1;
    if [ "$name" != "" ]; then
        tar cvjf $1.tar.bz2 $1
    fi
}

# Put a console clock in top right corner
# http://www.commandlinefu.com/commands/view/7916/
function clock () {
    while sleep 1;
    do
        tput sc
        tput cup 0 $(($(tput cols)-29))
        date
        tput rc
    done &
}

# create a new script, automatically populating the shebang line, editing the
# script, and making it executable.
# http://www.commandlinefu.com/commands/view/8050/
shebang() {
    if i=$(which $1);
    then
        printf '#!/usr/bin/env %s\n\n' $1 > $2 && chmod 755 $2 && vim + $2 && chmod 755 $2;
    else
        echo "'which' could not find $1, is it in your \$PATH?";
    fi;
    # in case the new script is in path, this throw out the command hash table and
    # start over  (man zshbuiltins)
    rehash
}

# Query Wikipedia via console over DNS
# http://www.commandlinefu.com/commands/view/2829
wp() {
    dig +short txt ${1}.wp.dg.cx
}

if [[ "$TERM" == "screen" ]]; then
    export TERM="screen-256color"
fi

# activate ls colors, (private if possible)
export ZSH_DIRCOLORS="$ZSH/dircolors-solarized/dircolors.256dark"
if [[ -a $ZSH_DIRCOLORS ]]; then
    if [[ "$TERM" == *256* ]]; then
        which dircolors > /dev/null && eval "`dircolors -b $ZSH_DIRCOLORS 2>/dev/null`"
    else
        # standard colors for non-256-color terms
        which dircolors > /dev/null && eval "`dircolors -b`"
    fi
else
    which dircolors > /dev/null && eval "`dircolors -b`"
fi

if [ $commands[lsb_release] ]; then
    LSB_DISTRIBUTOR=`lsb_release -i -s`
else
    LSB_DISTRIBUTOR="macos"
fi

if [[ "$LSB_DISTRIBUTOR" == "Ubuntu" || "$LSB_DISTRIBUTOR" == "Debian" ]]; then
    alias acs='apt-cache show'
    alias agi='sudo apt-get install'
    alias ag='sudo apt-get'
    alias agu='sudo apt-get update'
    alias agug='sudo apt-get upgrade'
    alias aguu='agu && agug'
    alias agr='sudo apt-get uninstall'
    alias agp='sudo apt-get purge'
    alias aga='sudo apt-get autoremove'
    alias ctl='sudo service '
    alias feierabend='sudo shutdown -h now'
fi


if [[ $OSTYPE =~ darwin ]]; then
    alias ps='ps ux'
    alias plaincopy='pbpaste -Prefer txt | pbcopy; pbpaste; echo'

    alias locate='mdfind -name'
    alias ddisk=daisydisk
    alias marked="open -b com.brettterpstra.marked2"
fi
alias duf='duf -hide-fs autofs,devfs,devtmpfs,tmpfs,mtmfs,none,squashfs,rootfs,overlay,fuse.snapfuse -hide-mp /snap'


if [ $commands[chezmoi] ]; then
    eval "$(zoxide init zsh)"
    alias cd=__zoxide_z
    alias c=__zoxide_z
fi

eval "$(starship init zsh)"
